// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Million.Infrastructure.Data;

#nullable disable

namespace Million.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Million.Domain.Enitities.Owner", b =>
                {
                    b.Property<int>("IdOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("BLOB");

                    b.HasKey("IdOwner");

                    b.ToTable("Owner");

                    b.HasData(
                        new
                        {
                            IdOwner = 1,
                            Address = "123 Elm Street",
                            Birthday = new DateTime(1975, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "John Doe"
                        },
                        new
                        {
                            IdOwner = 2,
                            Address = "456 Oak Avenue",
                            Birthday = new DateTime(1980, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("Million.Domain.Enitities.Property", b =>
                {
                    b.Property<int>("IdProperty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeInternal")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdOwner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdProperty");

                    b.HasIndex("IdOwner");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            IdProperty = 1,
                            Address = "789 Pine Road",
                            CodeInternal = "MODV123",
                            IdOwner = 1,
                            Name = "Modern Villa",
                            Price = 500000,
                            Year = 2015
                        },
                        new
                        {
                            IdProperty = 2,
                            Address = "10 Ocean Drive",
                            CodeInternal = "BFCD456",
                            IdOwner = 2,
                            Name = "Beachfront Condo",
                            Price = 300000,
                            Year = 2018
                        });
                });

            modelBuilder.Entity("Million.Domain.Enitities.PropertyImage", b =>
                {
                    b.Property<int>("IdPropertyImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("File")
                        .HasColumnType("BLOB");

                    b.Property<int>("IdProperty")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdPropertyImage");

                    b.HasIndex("IdProperty");

                    b.ToTable("PropertyImage");

                    b.HasData(
                        new
                        {
                            IdPropertyImage = 1,
                            Enabled = true,
                            IdProperty = 1
                        },
                        new
                        {
                            IdPropertyImage = 2,
                            Enabled = true,
                            IdProperty = 2
                        });
                });

            modelBuilder.Entity("Million.Domain.Enitities.PropertyTrace", b =>
                {
                    b.Property<int>("IdPropertyTrace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdProperty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdPropertyTrace");

                    b.HasIndex("IdProperty");

                    b.ToTable("PropertyTrace");

                    b.HasData(
                        new
                        {
                            IdPropertyTrace = 1,
                            DateSale = new DateTime(2020, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProperty = 1,
                            Name = "Initial Sale",
                            Tax = 45000,
                            Value = 450000
                        },
                        new
                        {
                            IdPropertyTrace = 2,
                            DateSale = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProperty = 2,
                            Name = "Initial Sale",
                            Tax = 28000,
                            Value = 280000
                        });
                });

            modelBuilder.Entity("Million.Domain.Enitities.Property", b =>
                {
                    b.HasOne("Million.Domain.Enitities.Owner", null)
                        .WithMany("Properties")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Million.Domain.Enitities.PropertyImage", b =>
                {
                    b.HasOne("Million.Domain.Enitities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("IdProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Million.Domain.Enitities.PropertyTrace", b =>
                {
                    b.HasOne("Million.Domain.Enitities.Property", "Property")
                        .WithMany("PropertyTraces")
                        .HasForeignKey("IdProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Million.Domain.Enitities.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Million.Domain.Enitities.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("PropertyTraces");
                });
#pragma warning restore 612, 618
        }
    }
}
